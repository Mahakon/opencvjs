{"remainingRequest":"/home/maha/mahaTinkoff/tinkoff-test1/node_modules/babel-loader/lib/index.js??ref--4-1!/home/maha/mahaTinkoff/tinkoff-test1/src/input-list/InputList.js","dependencies":[{"path":"/home/maha/mahaTinkoff/tinkoff-test1/src/input-list/InputList.js","mtime":1525203273947},{"path":"/home/maha/mahaTinkoff/tinkoff-test1/node_modules/cache-loader/dist/cjs.js","mtime":1524727190256},{"path":"/home/maha/mahaTinkoff/tinkoff-test1/node_modules/babel-loader/lib/index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dec, _class, _class2, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactCssModules = require('react-css-modules');\n\nvar _reactCssModules2 = _interopRequireDefault(_reactCssModules);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _inputList = require('./input-list.less');\n\nvar _inputList2 = _interopRequireDefault(_inputList);\n\nvar _Input = require('../base/input/Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _InputNames = require('../consts/InputNames');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar InputList = (_dec = (0, _reactCssModules2.default)(_inputList2.default), _dec(_class = (_temp = _class2 = function (_React$Component) {\n  _inherits(InputList, _React$Component);\n\n  function InputList(props) {\n    _classCallCheck(this, InputList);\n\n    var _this = _possibleConstructorReturn(this, (InputList.__proto__ || Object.getPrototypeOf(InputList)).call(this, props));\n\n    _this.handleOnInputChange = _this.handleOnInputChange.bind(_this);\n    return _this;\n  }\n\n  _createClass(InputList, [{\n    key: 'isNumeric',\n    value: function isNumeric(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n  }, {\n    key: 'handleOnInputChange',\n    value: function handleOnInputChange(_ref) {\n      var value = _ref.value,\n          name = _ref.name;\n      var _props = this.props,\n          lotPrice = _props.lotPrice,\n          lotAmount = _props.lotAmount,\n          handleOnValidInputData = _props.handleOnValidInputData,\n          handleOnInValidInputData = _props.handleOnInValidInputData;\n\n\n      var curSum = '',\n          curNumLots = '';\n\n      if (value !== '' && this.isNumeric(value)) {\n        switch (name) {\n          case _InputNames.SUM_NAME:\n            {\n              curNumLots = Math.floor(value / lotPrice) > lotAmount ? lotAmount : Math.floor(value / lotPrice);\n              curSum = value > lotAmount * lotPrice ? lotAmount * lotPrice : value;\n            }break;\n\n          case _InputNames.LOTS_NAME:\n            {\n              if (!Number.isInteger(Number.parseFloat(value))) {\n                return handleOnInValidInputData();\n              }\n\n              curNumLots = value > this.props.lotAmount ? this.props.lotAmount : value;\n              curSum = curNumLots * this.props.lotPrice;\n            }break;\n        }\n\n        if (curSum === 0 || curNumLots === 0) {\n          return handleOnInValidInputData();\n        }\n\n        return handleOnValidInputData(curSum, curNumLots);\n      }\n\n      return handleOnInValidInputData();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var inputDataArray = [{\n        title: 'Количество лотов',\n        name: _InputNames.LOTS_NAME,\n        value: this.props.lotsNum\n      }, {\n        title: 'Сумма Продажи, ' + this.props.currency,\n        name: _InputNames.SUM_NAME,\n        value: this.props.sum\n      }];\n\n      return _react2.default.createElement(\n        'div',\n        { styleName: 'input-container' },\n        inputDataArray.map(function (inputData, i) {\n          return _react2.default.createElement(_Input2.default, { key: i,\n            order: i,\n            inputData: inputData,\n            handleOnChange: _this2.handleOnInputChange });\n        })\n      );\n    }\n  }]);\n\n  return InputList;\n}(_react2.default.Component), _class2.propTypes = {\n  sum: _propTypes2.default.string.required,\n  lotsNum: _propTypes2.default.string.required,\n  lotPrice: _propTypes2.default.number.required,\n  lotAmount: _propTypes2.default.number.required,\n  currency: _propTypes2.default.string.required,\n  handleOnValidInputData: _propTypes2.default.func.required,\n  handleOnInValidInputData: _propTypes2.default.func.required\n}, _temp)) || _class);\nexports.default = InputList;\n;",{"version":3,"sources":["src/input-list/InputList.js"],"names":["InputList","props","handleOnInputChange","bind","n","isNaN","parseFloat","isFinite","value","name","lotPrice","lotAmount","handleOnValidInputData","handleOnInValidInputData","curSum","curNumLots","isNumeric","Math","floor","Number","isInteger","inputDataArray","title","lotsNum","currency","sum","map","inputData","i","Component","propTypes","string","required","number","func"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;;;;;;;IAGqBA,S,WADpB,mD;;;AAEC,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA,sHACXA,KADW;;AAEjB,UAAKC,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBC,IAAzB,OAA3B;AAFiB;AAGlB;;;;8BAWSC,C,EAAG;AACX,aAAO,CAACC,MAAMC,WAAWF,CAAX,CAAN,CAAD,IAAyBG,SAASH,CAAT,CAAhC;AACD;;;8CAEmC;AAAA,UAAdI,KAAc,QAAdA,KAAc;AAAA,UAAPC,IAAO,QAAPA,IAAO;AAAA,mBAKH,KAAKR,KALF;AAAA,UAEhCS,QAFgC,UAEhCA,QAFgC;AAAA,UAGhCC,SAHgC,UAGhCA,SAHgC;AAAA,UAIhCC,sBAJgC,UAIhCA,sBAJgC;AAAA,UAKhCC,wBALgC,UAKhCA,wBALgC;;;AAOlC,UAAIC,SAAS,EAAb;AAAA,UAAiBC,aAAa,EAA9B;;AAEA,UAAIP,UAAU,EAAV,IAAgB,KAAKQ,SAAL,CAAeR,KAAf,CAApB,EAA2C;AACzC,gBAAQC,IAAR;AACE;AAAe;AACbM,2BAAcE,KAAKC,KAAL,CAAWV,QAAQE,QAAnB,IACZC,SADW,GAEXA,SAFW,GAGXM,KAAKC,KAAL,CAAWV,QAAQE,QAAnB,CAHF;AAIAI,uBAAUN,QAASG,YAAYD,QAAtB,GACNC,YAAYD,QADN,GAEPF,KAFF;AAGD,aAAC;;AAEF;AAAgB;AACd,kBAAI,CAACW,OAAOC,SAAP,CAAiBD,OAAOb,UAAP,CAAkBE,KAAlB,CAAjB,CAAL,EAAiD;AAC/C,uBAAOK,0BAAP;AACD;;AAEDE,2BAAcP,QAAQ,KAAKP,KAAL,CAAWU,SAApB,GACX,KAAKV,KAAL,CAAWU,SADA,GAEXH,KAFF;AAGAM,uBAASC,aAAa,KAAKd,KAAL,CAAWS,QAAjC;AACD,aAAC;AApBJ;;AAuBA,YAAII,WAAW,CAAX,IAAgBC,eAAe,CAAnC,EAAsC;AACpC,iBAAOF,0BAAP;AACD;;AAED,eAAOD,uBAAuBE,MAAvB,EAA+BC,UAA/B,CAAP;AACD;;AAED,aAAOF,0BAAP;AACD;;;6BAES;AAAA;;AACR,UAAMQ,iBAAiB,CACrB;AACEC,eAAO,kBADT;AAEEb,mCAFF;AAGED,eAAO,KAAKP,KAAL,CAAWsB;AAHpB,OADqB,EAMrB;AACED,eAAO,oBAAoB,KAAKrB,KAAL,CAAWuB,QADxC;AAEEf,kCAFF;AAGED,eAAO,KAAKP,KAAL,CAAWwB;AAHpB,OANqB,CAAvB;;AAaA,aACE;AAAA;AAAA,UAAK,WAAU,iBAAf;AACGJ,uBAAeK,GAAf,CAAmB,UAACC,SAAD,EAAYC,CAAZ;AAAA,iBAClB,iDAAO,KAAKA,CAAZ;AACO,mBAAOA,CADd;AAEO,uBAAWD,SAFlB;AAGO,4BAAgB,OAAKzB,mBAH5B,GADkB;AAAA,SAAnB;AADH,OADF;AASD;;;;EArFoC,gBAAM2B,S,WAKpCC,S,GAAY;AACjBL,OAAK,oBAAUM,MAAV,CAAiBC,QADL;AAEjBT,WAAS,oBAAUQ,MAAV,CAAiBC,QAFT;AAGjBtB,YAAU,oBAAUuB,MAAV,CAAiBD,QAHV;AAIjBrB,aAAW,oBAAUsB,MAAV,CAAiBD,QAJX;AAKjBR,YAAU,oBAAUO,MAAV,CAAiBC,QALV;AAMjBpB,0BAAwB,oBAAUsB,IAAV,CAAeF,QANtB;AAOjBnB,4BAA0B,oBAAUqB,IAAV,CAAeF;AAPxB,C;kBALAhC,S;AAsFpB","file":"InputList.js","sourceRoot":"/home/maha/mahaTinkoff/tinkoff-test1","sourcesContent":["import React from 'react';\nimport CSSModules from 'react-css-modules';\nimport PropTypes from 'prop-types';\n\nimport styles from './input-list.less';\nimport Input from '../base/input/Input';\n\nimport { LOTS_NAME, SUM_NAME } from \"../consts/InputNames\";\n\n@CSSModules(styles)\nexport default class InputList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOnInputChange = this.handleOnInputChange.bind(this);\n  }\n  static propTypes = {\n    sum: PropTypes.string.required,\n    lotsNum: PropTypes.string.required,\n    lotPrice: PropTypes.number.required,\n    lotAmount: PropTypes.number.required,\n    currency: PropTypes.string.required,\n    handleOnValidInputData: PropTypes.func.required,\n    handleOnInValidInputData: PropTypes.func.required\n  };\n\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  handleOnInputChange({ value, name}) {\n    const {\n      lotPrice,\n      lotAmount,\n      handleOnValidInputData,\n      handleOnInValidInputData } = this.props;\n\n    let curSum = '', curNumLots = '';\n\n    if (value !== '' && this.isNumeric(value)) {\n      switch (name) {\n        case SUM_NAME: {\n          curNumLots = (Math.floor(value / lotPrice) >\n            lotAmount) ?\n            lotAmount :\n            Math.floor(value / lotPrice);\n          curSum = (value > (lotAmount * lotPrice)) ?\n            (lotAmount * lotPrice) :\n            value;\n        } break;\n\n        case LOTS_NAME: {\n          if (!Number.isInteger(Number.parseFloat(value))) {\n            return handleOnInValidInputData();\n          }\n\n          curNumLots = (value > this.props.lotAmount) ?\n            this.props.lotAmount :\n            value;\n          curSum = curNumLots * this.props.lotPrice;\n        } break;\n      }\n\n      if (curSum === 0 || curNumLots === 0) {\n        return handleOnInValidInputData();\n      }\n\n      return handleOnValidInputData(curSum, curNumLots);\n    }\n\n    return handleOnInValidInputData();\n  }\n\n  render () {\n    const inputDataArray = [\n      {\n        title: 'Количество лотов',\n        name: LOTS_NAME,\n        value: this.props.lotsNum\n      },\n      {\n        title: 'Сумма Продажи, ' + this.props.currency,\n        name: SUM_NAME,\n        value: this.props.sum\n      }\n    ];\n\n    return(\n      <div styleName=\"input-container\">\n        {inputDataArray.map((inputData, i) =>\n          <Input key={i}\n                 order={i}\n                 inputData={inputData}\n                 handleOnChange={this.handleOnInputChange}/>)}\n      </div>\n    )\n  };\n};\n"]}]}