{"remainingRequest":"/home/maha/mahaTinkoff/tinkoff-test1/node_modules/babel-loader/lib/index.js??ref--4-1!/home/maha/mahaTinkoff/tinkoff-test1/src/main-form/MainFormContainer.js","dependencies":[{"path":"/home/maha/mahaTinkoff/tinkoff-test1/src/main-form/MainFormContainer.js","mtime":1524817268221},{"path":"/home/maha/mahaTinkoff/tinkoff-test1/node_modules/cache-loader/dist/cjs.js","mtime":1524727190256},{"path":"/home/maha/mahaTinkoff/tinkoff-test1/node_modules/babel-loader/lib/index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _MainForm = require('./MainForm');\n\nvar _MainForm2 = _interopRequireDefault(_MainForm);\n\nvar _InputTitles = require('../consts/InputTitles');\n\nvar _InputNames = require('../consts/InputNames');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MainFormContainer = function (_React$Component) {\n  _inherits(MainFormContainer, _React$Component);\n\n  function MainFormContainer(props) {\n    _classCallCheck(this, MainFormContainer);\n\n    var _this = _possibleConstructorReturn(this, (MainFormContainer.__proto__ || Object.getPrototypeOf(MainFormContainer)).call(this, props));\n\n    _this.state = {\n      lotPrice: _this.props.lotPrice,\n      currency: _this.props.currency,\n      lotAmount: _this.props.lotAmount,\n      enablePurchase: false,\n      comission: {\n        value: '',\n        currnecy: ''\n      },\n      fullPrice: {\n        value: '',\n        currency: ''\n      },\n      inputArray: [{\n        value: '',\n        title: _InputTitles.SUM_TITLE + _this.props.currency,\n        name: _InputNames.SUM_NAME\n      }, {\n        value: '',\n        title: _InputTitles.LOTS_TITLE,\n        name: _InputNames.LOTS_NAME\n      }],\n      labelArray: [{\n        title: '1 ЛОТ = 100 АКЦИЙ',\n        data: {\n          amount: _this.props.lotPrice,\n          units: _this.props.currency\n        }\n      }, {\n        title: 'ДОСТУПНО ДЛЯ ПРОДАЖИ',\n        data: {\n          amount: _this.props.lotAmount,\n          units: 'лотов'\n        }\n      }]\n    };\n\n    _this.handleOnValidData = _this.handleOnValidData.bind(_this);\n    _this.handleOnInValidData = _this.handleOnInValidData.bind(_this);\n    return _this;\n  }\n\n  _createClass(MainFormContainer, [{\n    key: 'getFullPrice',\n    value: function getFullPrice(lotSize) {\n      return new Promise(function (resolve, reject) {\n        resolve({\n          fullPrice: {\n            value: Math.floor(Math.random() * (100000 - 1)) + 1,\n            currency: '₽'\n          },\n          comission: {\n            value: Math.floor(Math.random() * (100 - 1)) + 1,\n            currency: '₽'\n          }\n        });\n      });\n    }\n  }, {\n    key: 'handleOnInValidData',\n    value: function handleOnInValidData() {\n      this.setState(function (prevState) {\n        var curState = _extends({}, prevState);\n\n        curState.inputArray[0].value = '';\n        curState.inputArray[1].value = '';\n        curState.enablePurchase = false;\n        return curState;\n      });\n    }\n  }, {\n    key: 'handleOnValidData',\n    value: function handleOnValidData(sum, numLots) {\n      var _this2 = this;\n\n      this.getFullPrice(numLots).then(function (ans) {\n        return _this2.setState(function (prevState) {\n          var curState = _extends({}, prevState);\n\n          curState.inputArray[0].value = sum;\n          curState.inputArray[1].value = numLots;\n          curState.comission = ans.comission;\n          curState.fullPrice = ans.fullPrice;\n          curState.enablePurchase = true;\n          return curState;\n        });\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(_MainForm2.default, { formState: this.state,\n        handleOnValidData: this.handleOnValidData,\n        handleOnInValidData: this.handleOnInValidData });\n    }\n  }]);\n\n  return MainFormContainer;\n}(_react2.default.Component);\n\nexports.default = MainFormContainer;\n;",{"version":3,"sources":["src/main-form/MainFormContainer.js"],"names":["MainFormContainer","props","state","lotPrice","currency","lotAmount","enablePurchase","comission","value","currnecy","fullPrice","inputArray","title","name","labelArray","data","amount","units","handleOnValidData","bind","handleOnInValidData","lotSize","Promise","resolve","reject","Math","floor","random","setState","prevState","curState","sum","numLots","getFullPrice","then","ans","Component"],"mappings":";;;;;;;;;;;AAAA;;;;AAEA;;;;AAEA;;AACA;;;;;;;;;;IAEqBA,iB;;;AACnB,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,sIACXA,KADW;;AAEjB,UAAKC,KAAL,GAAa;AACXC,gBAAU,MAAKF,KAAL,CAAWE,QADV;AAEXC,gBAAU,MAAKH,KAAL,CAAWG,QAFV;AAGXC,iBAAW,MAAKJ,KAAL,CAAWI,SAHX;AAIXC,sBAAgB,KAJL;AAKXC,iBAAW;AACTC,eAAO,EADE;AAETC,kBAAU;AAFD,OALA;AASXC,iBAAW;AACTF,eAAO,EADE;AAETJ,kBAAU;AAFD,OATA;AAaXO,kBAAY,CACV;AACEH,eAAO,EADT;AAEEI,eAAO,yBAAY,MAAKX,KAAL,CAAWG,QAFhC;AAGES;AAHF,OADU,EAMV;AACEL,eAAO,EADT;AAEEI,sCAFF;AAGEC;AAHF,OANU,CAbD;AAyBXC,kBAAY,CACV;AACEF,eAAO,mBADT;AAEEG,cAAM;AACJC,kBAAQ,MAAKf,KAAL,CAAWE,QADf;AAEJc,iBAAO,MAAKhB,KAAL,CAAWG;AAFd;AAFR,OADU,EAQV;AACEQ,eAAO,sBADT;AAEEG,cAAM;AACJC,kBAAQ,MAAKf,KAAL,CAAWI,SADf;AAEJY,iBAAO;AAFH;AAFR,OARU;AAzBD,KAAb;;AA2CA,UAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBC,IAAvB,OAAzB;AACA,UAAKC,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBD,IAAzB,OAA3B;AA9CiB;AA+ClB;;;;iCAEYE,O,EAAS;AACpB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCD,gBAAQ;AACNb,qBAAW;AACTF,mBAAOiB,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiB,SAAS,CAA1B,CAAX,IAA2C,CADzC;AAETvB,sBAAU;AAFD,WADL;AAKNG,qBAAW;AACTC,mBAAOiB,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiB,MAAM,CAAvB,CAAX,IAAwC,CADtC;AAETvB,sBAAU;AAFD;AALL,SAAR;AAUD,OAXM,CAAP;AAYD;;;0CAEqB;AACpB,WAAKwB,QAAL,CAAc,UAACC,SAAD,EAAe;AAC3B,YAAIC,wBAAeD,SAAf,CAAJ;;AAEAC,iBAASnB,UAAT,CAAoB,CAApB,EAAuBH,KAAvB,GAA+B,EAA/B;AACAsB,iBAASnB,UAAT,CAAoB,CAApB,EAAuBH,KAAvB,GAA+B,EAA/B;AACAsB,iBAASxB,cAAT,GAA0B,KAA1B;AACA,eAAOwB,QAAP;AACD,OAPD;AAQD;;;sCAEiBC,G,EAAKC,O,EAAS;AAAA;;AAC9B,WAAKC,YAAL,CAAkBD,OAAlB,EACGE,IADH,CAEI;AAAA,eACE,OAAKN,QAAL,CAAc,UAACC,SAAD,EAAe;AAC3B,cAAIC,wBAAeD,SAAf,CAAJ;;AAEAC,mBAASnB,UAAT,CAAoB,CAApB,EAAuBH,KAAvB,GAA+BuB,GAA/B;AACAD,mBAASnB,UAAT,CAAoB,CAApB,EAAuBH,KAAvB,GAA+BwB,OAA/B;AACAF,mBAASvB,SAAT,GAAqB4B,IAAI5B,SAAzB;AACAuB,mBAASpB,SAAT,GAAqByB,IAAIzB,SAAzB;AACAoB,mBAASxB,cAAT,GAA0B,IAA1B;AACA,iBAAOwB,QAAP;AACD,SATD,CADF;AAAA,OAFJ;AAcD;;;6BAES;AACR,aACE,oDAAU,WAAW,KAAK5B,KAA1B;AACU,2BAAmB,KAAKgB,iBADlC;AAEU,6BAAqB,KAAKE,mBAFpC,GADF;AAKD;;;;EAnG4C,gBAAMgB,S;;kBAAhCpC,iB;AAoGpB","file":"MainFormContainer.js","sourceRoot":"/home/maha/mahaTinkoff/tinkoff-test1","sourcesContent":["import React from 'react';\n\nimport MainForm from './MainForm';\n\nimport { LOTS_TITLE, SUM_TITLE } from '../consts/InputTitles';\nimport { LOTS_NAME, SUM_NAME } from '../consts/InputNames';\n\nexport default class MainFormContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lotPrice: this.props.lotPrice,\n      currency: this.props.currency,\n      lotAmount: this.props.lotAmount,\n      enablePurchase: false,\n      comission: {\n        value: '',\n        currnecy: ''\n      },\n      fullPrice: {\n        value: '',\n        currency: ''\n      },\n      inputArray: [\n        {\n          value: '',\n          title: SUM_TITLE + this.props.currency,\n          name: SUM_NAME\n        },\n        {\n          value: '',\n          title: LOTS_TITLE,\n          name: LOTS_NAME\n        }\n      ],\n      labelArray: [\n        {\n          title: '1 ЛОТ = 100 АКЦИЙ',\n          data: {\n            amount: this.props.lotPrice,\n            units: this.props.currency\n          }\n        },\n        {\n          title: 'ДОСТУПНО ДЛЯ ПРОДАЖИ',\n          data: {\n            amount: this.props.lotAmount,\n            units: 'лотов'\n          }\n        }\n      ]\n    };\n\n    this.handleOnValidData = this.handleOnValidData.bind(this);\n    this.handleOnInValidData = this.handleOnInValidData.bind(this);\n  }\n\n  getFullPrice(lotSize) {\n    return new Promise((resolve, reject) => {\n      resolve({\n        fullPrice: {\n          value: Math.floor(Math.random() * (100000 - 1)) + 1,\n          currency: '₽'\n        },\n        comission: {\n          value: Math.floor(Math.random() * (100 - 1)) + 1,\n          currency: '₽'\n        },\n      })\n    })\n  }\n\n  handleOnInValidData() {\n    this.setState((prevState) => {\n      let curState = {...prevState};\n\n      curState.inputArray[0].value = '';\n      curState.inputArray[1].value = '';\n      curState.enablePurchase = false;\n      return curState;\n    })\n  }\n\n  handleOnValidData(sum, numLots) {\n    this.getFullPrice(numLots)\n      .then(\n        ans =>\n          this.setState((prevState) => {\n            let curState = {...prevState};\n\n            curState.inputArray[0].value = sum;\n            curState.inputArray[1].value = numLots;\n            curState.comission = ans.comission;\n            curState.fullPrice = ans.fullPrice;\n            curState.enablePurchase = true;\n            return curState;\n          })\n      )\n  }\n\n  render () {\n    return(\n      <MainForm formState={this.state}\n                handleOnValidData={this.handleOnValidData}\n                handleOnInValidData={this.handleOnInValidData}/>\n    )\n  };\n};\n"]}]}