{"remainingRequest":"/home/maha/mahaTinkoff/tinkoff-test1/node_modules/babel-loader/lib/index.js??ref--4-1!/home/maha/mahaTinkoff/tinkoff-test1/src/input-list/InputListContainer.js","dependencies":[{"path":"/home/maha/mahaTinkoff/tinkoff-test1/src/input-list/InputListContainer.js","mtime":1524778099051},{"path":"/home/maha/mahaTinkoff/tinkoff-test1/node_modules/cache-loader/dist/cjs.js","mtime":1524727190256},{"path":"/home/maha/mahaTinkoff/tinkoff-test1/node_modules/babel-loader/lib/index.js","mtime":1520329890000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _InputList = require(\"./InputList\");\n\nvar _InputList2 = _interopRequireDefault(_InputList);\n\nvar _InputNames = require(\"../consts/InputNames\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar InputListContainer = function (_React$Component) {\n  _inherits(InputListContainer, _React$Component);\n\n  function InputListContainer(props) {\n    _classCallCheck(this, InputListContainer);\n\n    var _this = _possibleConstructorReturn(this, (InputListContainer.__proto__ || Object.getPrototypeOf(InputListContainer)).call(this, props));\n\n    _this.state = {\n      inputArray: _this.props.inputArray\n    };\n\n    _this.handleOnInputChange = _this.handleOnInputChange.bind(_this);\n    return _this;\n  }\n\n  _createClass(InputListContainer, [{\n    key: \"isNumeric\",\n    value: function isNumeric(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n  }, {\n    key: \"handleOnInputChange\",\n    value: function handleOnInputChange(input) {\n      var curSum = '',\n          curNumLots = '';\n      console.log(input.value);\n\n      if (input.value !== '' && this.isNumeric(input.value)) {\n        switch (input.name) {\n          case _InputNames.SUM_NAME:\n            {\n              curNumLots = Math.floor(input.value / this.props.lotPrice) > this.props.lotAmount ? this.props.lotAmount : Math.floor(input.value / this.props.lotPrice);\n              curSum = input.value > this.props.lotAmount * this.props.lotPrice ? this.props.lotAmount * this.props.lotPrice : input.value;\n            }break;\n          case _InputNames.LOTS_NAME:\n            {\n              curNumLots = input.value > this.props.lotAmount ? this.props.lotAmount : input.value;\n              curSum = curNumLots * this.props.lotPrice;\n            }break;\n        }\n\n        return this.props.handleOnValidData(curSum, curNumLots);\n      }\n      this.setState(function (prevState) {\n        var curState = _extends({}, prevState);\n\n        curState.inputArray[0].value = curSum;\n        curState.inputArray[1].value = curNumLots;\n        return curState;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(_InputList2.default, { inputArray: this.state.inputArray,\n        handleOnInputChange: this.handleOnInputChange });\n    }\n  }]);\n\n  return InputListContainer;\n}(_react2.default.Component);\n\nexports.default = InputListContainer;\n;",{"version":3,"sources":["src/input-list/InputListContainer.js"],"names":["InputListContainer","props","state","inputArray","handleOnInputChange","bind","n","isNaN","parseFloat","isFinite","input","curSum","curNumLots","console","log","value","isNumeric","name","Math","floor","lotPrice","lotAmount","handleOnValidData","setState","prevState","curState","Component"],"mappings":";;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;;;;;;;IAEqBA,kB;;;AACnB,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA,wIACXA,KADW;;AAEjB,UAAKC,KAAL,GAAa;AACXC,kBAAY,MAAKF,KAAL,CAAWE;AADZ,KAAb;;AAIA,UAAKC,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBC,IAAzB,OAA3B;AANiB;AAOlB;;;;8BAESC,C,EAAG;AACX,aAAO,CAACC,MAAMC,WAAWF,CAAX,CAAN,CAAD,IAAyBG,SAASH,CAAT,CAAhC;AACD;;;wCAEmBI,K,EAAO;AACzB,UAAIC,SAAS,EAAb;AAAA,UAAiBC,aAAa,EAA9B;AACAC,cAAQC,GAAR,CAAYJ,MAAMK,KAAlB;;AAEA,UAAIL,MAAMK,KAAN,KAAgB,EAAhB,IAAsB,KAAKC,SAAL,CAAeN,MAAMK,KAArB,CAA1B,EAAuD;AACrD,gBAAQL,MAAMO,IAAd;AACE;AAAe;AACbL,2BAAcM,KAAKC,KAAL,CAAWT,MAAMK,KAAN,GAAc,KAAKd,KAAL,CAAWmB,QAApC,IACZ,KAAKnB,KAAL,CAAWoB,SADA,GAEX,KAAKpB,KAAL,CAAWoB,SAFA,GAGXH,KAAKC,KAAL,CAAWT,MAAMK,KAAN,GAAc,KAAKd,KAAL,CAAWmB,QAApC,CAHF;AAIAT,uBAAUD,MAAMK,KAAN,GAAe,KAAKd,KAAL,CAAWoB,SAAX,GAAuB,KAAKpB,KAAL,CAAWmB,QAAlD,GACN,KAAKnB,KAAL,CAAWoB,SAAX,GAAuB,KAAKpB,KAAL,CAAWmB,QAD5B,GAEPV,MAAMK,KAFR;AAGD;AACD;AAAgB;AACdH,2BAAcF,MAAMK,KAAN,GAAc,KAAKd,KAAL,CAAWoB,SAA1B,GACX,KAAKpB,KAAL,CAAWoB,SADA,GAEXX,MAAMK,KAFR;AAGAJ,uBAASC,aAAa,KAAKX,KAAL,CAAWmB,QAAjC;AACD;AAfH;;AAkBA,eAAO,KAAKnB,KAAL,CAAWqB,iBAAX,CAA6BX,MAA7B,EAAqCC,UAArC,CAAP;AACD;AACD,WAAKW,QAAL,CAAc,UAACC,SAAD,EAAe;AAC3B,YAAIC,wBAAeD,SAAf,CAAJ;;AAEAC,iBAAStB,UAAT,CAAoB,CAApB,EAAuBY,KAAvB,GAA+BJ,MAA/B;AACAc,iBAAStB,UAAT,CAAoB,CAApB,EAAuBY,KAAvB,GAA+BH,UAA/B;AACA,eAAOa,QAAP;AACD,OAND;AAQD;;;6BAES;AACR,aACE,qDAAW,YAAY,KAAKvB,KAAL,CAAWC,UAAlC;AACW,6BAAqB,KAAKC,mBADrC,GADF;AAID;;;;EAtD6C,gBAAMsB,S;;kBAAjC1B,kB;AAuDpB","file":"InputListContainer.js","sourceRoot":"/home/maha/mahaTinkoff/tinkoff-test1","sourcesContent":["import React from 'react';\n\nimport InputList from \"./InputList\";\nimport {LOTS_NAME, SUM_NAME} from \"../consts/InputNames\";\n\nexport default class InputListContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputArray: this.props.inputArray\n    };\n\n    this.handleOnInputChange = this.handleOnInputChange.bind(this);\n  }\n\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  handleOnInputChange(input) {\n    let curSum = '', curNumLots = '';\n    console.log(input.value);\n\n    if (input.value !== '' && this.isNumeric(input.value)) {\n      switch (input.name) {\n        case SUM_NAME: {\n          curNumLots = (Math.floor(input.value / this.props.lotPrice) >\n            this.props.lotAmount) ?\n            this.props.lotAmount :\n            Math.floor(input.value / this.props.lotPrice);\n          curSum = (input.value > (this.props.lotAmount * this.props.lotPrice)) ?\n            (this.props.lotAmount * this.props.lotPrice) :\n            input.value;\n        }break;\n        case LOTS_NAME: {\n          curNumLots = (input.value > this.props.lotAmount) ?\n            this.props.lotAmount :\n            input.value;\n          curSum = curNumLots * this.props.lotPrice;\n        }break;\n      }\n\n      return this.props.handleOnValidData(curSum, curNumLots);\n    }\n    this.setState((prevState) => {\n      let curState = {...prevState};\n\n      curState.inputArray[0].value = curSum;\n      curState.inputArray[1].value = curNumLots;\n      return curState;\n    })\n\n  }\n\n  render () {\n    return(\n      <InputList inputArray={this.state.inputArray}\n                 handleOnInputChange={this.handleOnInputChange}/>\n    )\n  };\n};\n"]}]}